//In Javascript write a function that takes a string, splits the string by dots (.) and returns the second last string from that split. If there are no dots in the original string return an empty string. For example the parameter "ggg.ttt.com", the function returns "ttt".


// You have been asked to count the number of times each word (including alphanumeric sequences such as "user123") appears in a file. All other characters, such as spaces and end-of-line markers, are to be ignored. The files will vary in size. What process would you use to achieve the required result?
// 	1. For each line read in from a file, remove all non-alphanumeric characters and see if the remaining sequences of alphanumeric characters has been stored in an array. If the sequence has not yet been stored, store the sequence in an array and give it the count of one. If the sequence has already been stored, increment the sequence in the array by one. Output the array of sequences and associated counts once file has been fully read.
// 	2. For each line read in from a file, split by non-alphanumeric characters. Cycle through each non-empty sequence and store the sequence in a database. Once the file is fully read, do a database query producing the counts of each sequence.
// 	3. Read in the whole file into a single string. Step through the string and once a non-alphanumeric character is found use the Linux grep command to search the remaining string to see how many times it appears in the file, then output the sequence and total. Once that is done move on to the next sequence. Continue until the full string has been parsed.
// 	4. For each line read in from a file, split by non-alphanumeric characters. Cycle through each non-empty sequence and see if it has been stored in an array already. If it hasn't been stored, then store the sequence in an array and give it the count of 1. If the sequence is already stored, increment the sequence in the array by one. Output the array of sequences and associated counts once file has been fully read.


// You need to count the number of lines in a text file that end in a carriage return (ASCII code 13) as well as the average length of those lines. The file may be large. What programming process would you use?
// 	1. Read the file line by line and assign a counter for the number of lines as well as an array to store the line length. Once the file has been fully read, determine the average line length by going through the array of line lengths to add up the line lengths, then divide the result by the length of the array to get the average line length. Output the number of lines counted and the average line length.
// 	2. Read in the whole file. Split the contents by carriage returns. Divide the length of the whole file by the count of the split by carriage returns. Output the length of the split by carriage returns and the number produced by the division.
// 	3. Read the file line by line and assign a counter for the number of lines. For each line read in, add the length of the line to a variable storing sum of all line lengths. Once the file is fully read, output the counter of the number of lines and the result from dividing the sum of all line lengths by the number of lines.
// 	4. Read the file line by line. As each line is read in, add one to a counter. Once that is done reload the file line by line a assign a counter for the length of the line. Once that has been completed, divide the counter for the length of the lines by the counter for the number of lines. Output the number of lines and the number produced by the division.


// You have been asked to create a random password generator. The password generator must ask the user for the desired length of the password (minimum four characters). Each password must have at least one digit excluding zero and one (2-9), at least one lowercase letter other than a lower case L, at least one uppercase letter other than O and at least one of these characters between the brackets (!@#$%^&*). What steps would you follow to produce a valid password?
// 	1. Grab the length of the password, setting it to 4 if it is less than 4. Produce a string that contains all valid characters. Using a loop, iterate through the given length of the password and randomly select a character within the string of all valid characters and append them to the result. Output the result.
// 	2. Grab the length of the password, setting it to 4 if it is less than 4. Produce a string with all digits, a string with all letters in the Latin alphabet in lowercase, a string with all letters in the Latin alphabet in uppercase and a string with all the possible special characters. Randomly select a character from each of these strings and append them to the result. Randomly shuffle the resulting string and output the result.
// 	3. Grab the length of the password, setting it to 4 if it is less than 4. Produce a string with all valid digits, a string with all valid lowercase letters in the Latin alphabet, a string with all valid upper case letters in the Latin alphabet, and a string with all the possible special characters. Randomly select a character from each of these strings and append them to the result. Using a loop from 5 to the length of the password, randomly select one of the four strings and randomly select a character from that string and append that to the result. Randomly shuffle the resulting string and output the result.
// 	4. Grab the length of the password, setting it to 4 if it is less than 4. Produce an array that contains all valid characters. Using a loop, iterate through the given length of the password and randomly select a character within the string of all valid characters.


// You are asked to generate a list of integers and their associate squares (that is the integer to the power of 2) where the square does not exceed a given number. As an example if given the number 50, the highest square value to be output would be 49. What steps are needed for this programming snippet to produce the correct output?
// 	1. Given the number, create a loop that goes from 1 to that number. Calculate the square of each number in the loop and output the number and its square.
// 	2. Given the number, create a loop that goes from 1 to that number. Calculate the square of each number in the loop and if it is less than the given number then output the number and its square.
// 	3. Given the number, create a loop that goes from 1 to the square root of that number. Calculate the square of each number in the loop and output each number and its square.
// 	4. Given the number, create a loop that goes from 1 to that number. Calculate the square of each number in the loop and if it is less than the given number output the result. Once the highest square number is reached, jump out of the loop.


// You need to create a unique username. The username needs to have the first letter of the first and last name of the user along with the current 10 digit unix timestamp and three random digits at the end. If the first or last name are missing, replace the first letter(s) with 'X'. How would you proceed?
// 	1. After reading the first and last name of the user, extract the first character of the first and last names. If either of these characters is missing, replace them both with an 'X'. Append the current Unix timestamp to these two characters and add 999 to the end.
// 	2. After reading the first and last name of the user and removing any whitespace surrounding them, extract the first character of the first and last names. If either of these characters is missing, replace the missing character with a 'X'. Append the current Unix timestamp to these two characters and add a random number between 100 and 999 to the end.
// 	3. After reading the first and last name of the user, extract the first character of the first and last names. If either of these characters is missing, replace the missing characters with a 'X'. Append the current datestamp to these two characters and add a random number between 100 and 999 to the end.
// 	 4. After reading the first and last name of the user, extract the first character of the first and last names. If either of these characters is missing, replace them both with a 'X'. Append the current Unix timestamp to these two characters and add a random number between 100 and 999 to the end.

